Author of Review: Sam Trabitz
Date of Review: 09/26/17
File Under Review: QuestionBlockAction.cs
Author(s) of File: Allie Jett, Sam Trabitz
Comments on Code Quality:
While I wrote this class, I used the logic for the block bouncing that Allie had made earlier. So I am mostly going over her
implementation of the block bounce. In this class, there are two private class-wide variables declared: bool maxHeightReached and Vector2
initialPosition. I don't really like having private class variables declared only sometimes when we need them, since that makes the 
behavior of our game objects a lot less predictable. Perhaps instead of declaring a private initial position, we instead have that as a member
of all GameObjects that need it. Also, I don't really like the use of a boolean to determine when the maximum height is reached. I think that 
we should just have position values that get checked that are hardcoded in as constants.

Minutes to Complete: 15 minutes
Hypothetical Change to File:
If we wanted to change the height at which the blocks bounce, we would have to change at 6 different points and 3 different files 
the value of the block bounce. Alternatively, we could have a constant called BlockBounceHeight and use that in all places where 
we want to bounce a block. This avoids the confusing magic numbers and also gives us a single point of control.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Author of Review: Sam Trabitz
Date of Review: 09/26/17
File Under Review: IMoveable.cs
Author(s) of File: Anna Wolfe
Comments on Code Quality:
This is a very small interface, but I would like to talk about the impact it has on all of our game objects. This interface declares
a velocity member and a move method. However, the move method isn't as important as we thought it would be when designing this class.
A lot of the moving is done in the states by altering the velocity member, not actually through this move method. Maybe later when we
have to implement enemy AI we will have a use for this method, but for right now it seems like it is just taking up bloated space in every
single one of our game objects.

Minutes to Complete: 10 minutes
Hypothetical Change to File:
Even if we did want to make something move, which isn't necessary for sprint 1, it likely wouldn't be in the move method, but rather handled
by our state design pattern, because there usually won't be just a single instance of what to do when moving. 